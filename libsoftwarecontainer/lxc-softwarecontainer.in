#!/bin/sh -e

#
# This LXC template is based on the busybox one shipped with LXC.
# Original author: Daniel Lezcano <daniel.lezcano@free.fr>
#
# LXC is free software, released under GNU LGPL 2.1
#
# Reader's guide: to get the full understanding of how the containers are
# set up in this system, make sure to read the lxc configuration file
# for this project (softwarecontainer.conf) where pty allocation, and some
# further mount points, as well as networking set up, is listed.
#

create_rootfs()
{
    rootfs=$1
    name=$2
    res=0

    # This is the rootfs tree in the container. Apart from the files we
    # create below, this will be empty, and most directories will be bind
    # mounted from the host into the container (/lib etc, see below and
    # the configuration file).

    tree="\
        $rootfs/bin \
        $rootfs/dev \
        $rootfs/etc \
        $rootfs/etc/pulse \
        $rootfs/home \
        $rootfs/lib \
        $rootfs/lib64 \
        $rootfs/proc \
        $rootfs/root \
        $rootfs/sbin \
        $rootfs/usr/lib \
        $rootfs/usr/lib64 \
        $rootfs/usr/sbin \
        $rootfs/tmp \
        $rootfs/gateways \
        $rootfs/${CMAKE_INSTALL_PREFIX} \
        ${ADDITIONAL_FOLDER_MOUNTS}"

    # The tree needs to be writeable for the owner and read/execute for all
    mkdir -p $tree || return 1
    chmod 755 $tree || return 1

    # Create entry for root user in /etc/passwd and /etc/group
    echo "root:x:0:0:root:/root:/bin/sh" >> $rootfs/etc/passwd
    echo "root:x:0:root" >> $rootfs/etc/group

    # We don't have an shm fs mounted, so tell pulse not to use it.
    echo "disable-shm=yes" >> $rootfs/etc/pulse/client.conf
    # We generate a unique machine id for D-Bus.
    dbus-uuidgen --ensure=$rootfs/etc/machine-id
    # Copy DNS info into the guest, if available
    if [ -e /etc/resolv.conf ]; then
        cp /etc/resolv.conf $rootfs/etc/resolv.conf
    fi

    return $res
}

configure_busybox()
{
    rootfs=$1

    which busybox >/dev/null 2>&1
    if [ $? -ne 0 ]; then
        echo "busybox executable is not accessible"
        return 1
    fi

    # Copy the busybox binary into the rootfs
    cp $(which busybox) $rootfs/bin
    if [ $? -ne 0 ]; then
        echo "failed to copy busybox in the rootfs"
        return 1
    fi

    # Symlink to busybox for the commands it supports
    cd $rootfs/bin || return 1
    ./busybox --list | xargs -n1 ln -s busybox

    return 0
}

copy_configuration()
{
    path=$1
    rootfs=$2
    name=$3

    # Set some non-static mount points, the rest are already in the config file
    echo "lxc.rootfs = $rootfs" >> $path/config
    echo "lxc.mount.entry = ${CMAKE_INSTALL_PREFIX} $rootfs/${CMAKE_INSTALL_PREFIX} none ro,bind 0 0" >> $path/config

    # Bind-mount the directory containing init.lxc to /usr/sbin. This is typically
    # /usr/sbin on the host as well.
    INITLXCFILE=`which init.lxc`
    if [ $? -ne 0 ]; then
        echo "Error in template: init.lxc not found, unable to mount containing directory to /usr/sbin in container"
        return 1
    fi
    echo "lxc.mount.entry = $(dirname $INITLXCFILE) $rootfs/usr/sbin none ro,bind 0 0" >> $path/config

    # If the gateway dir variable is set, add a mount entry for that one also.
    # The gateway folder needs to be writable since wayland requires some extra
    # files to be created by the client in the folder where the wayland socket
    # is located
    if [ -n "$GATEWAY_DIR" ]; then
        echo "lxc.mount.entry = $GATEWAY_DIR gateways none rw,bind 0 0" >> $path/config
        chmod go+rwx $GATEWAY_DIR
    fi
}

usage()
{
    echo "$1 -h|--help -b|--buffer -p|--path=<path>|--rootfs=<path>"
    return 0
}

options=$(getopt -o hp:n: -l help,path:,name:,rootfs: -- "$@")
if [ $? -ne 0 ]; then
    usage $(basename $0)
    exit 1
fi
eval set -- "$options"

while true
do
    case "$1" in
        -h|--help)      usage $0 && exit 0;;
        -p|--path)      path=$2; shift 2;;
        -n|--name)      name=$2; shift 2;;
        --rootfs)       rootfs=$2; shift 2;;
        --)             shift 1; break ;;
        *)              break ;;
    esac
done

if [ "$(id -u)" != "0" ]; then
    echo "This script should be run as 'root'"
    exit 1
fi

if [ -z "$path" ]; then
    echo "'path' parameter is required"
    exit 1
fi

# detect rootfs (either from contents in config, or by using $path
if [ -z "$rootfs" ]; then
    config="$path/config"
    if grep -q '^lxc.rootfs' $config 2>/dev/null ; then
        rootfs=`grep 'lxc.rootfs =' $config | awk -F= '{ print $2 }'`
    else
        rootfs=$path/rootfs
    fi
fi

create_rootfs $rootfs $name
if [ $? -ne 0 ]; then
    echo "failed to create softwarecontainer rootfs"
    exit 1
fi

configure_busybox $rootfs
if [ $? -ne 0 ]; then
    echo "failed to configure busybox in the rootfs"
    exit 1
fi

copy_configuration $path $rootfs $name
if [ $? -ne 0 ]; then
    echo "failed to write configuration file"
    exit 1
fi
