/*
 * Copyright (C) 2017 Pelagicore AB
 *
 * Permission to use, copy, modify, and/or distribute this software for
 * any purpose with or without fee is hereby granted, provided that the
 * above copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
 * WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR
 * BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES
 * OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
 * WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
 * ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
 * SOFTWARE.
 *
 * For further information see LICENSE
 */

#include <arpa/inet.h>

#include "gateway/gateway.h"
#include "networkgatewayfunctions.h"
#include "networkgateway.h"

namespace softwarecontainer {

uint32_t NetworkGatewayFunctions::generateIP(const uint32_t netmask,
                                             const std::string gatewayIP,
                                             const int32_t containerID)
{
    log_debug() << "Generating ip-address";
    // IP generation is designed for Ipv4 in case of transition to IPv6 it should be revised
    uint32_t internetAddress;

    /*
     * Netmask is used for determining range of IP address assignment. maskBits variable represents
     * bit-count for creating IP range starting from least significant bit of m_gateway. Since an
     * ipv4 address consist of 32 bits, maskBits shall not be greater than 32. Since bit 0 and
     * bit 31 cannot give a range but a single exact value, those will not be accepted as a maskBits.
     */
    if (netmask > 31 || netmask < 1) {
        throw IPAllocationError("inappropriate netmask : " + netmask);
    }

    // value of m_netmask interprets maskBits to a mask integer to calculate range.
    uint32_t maskBits = (1L << (32 - netmask)) - 1;

    if ( 1 != inet_pton(AF_INET, gatewayIP.c_str(), &internetAddress)) {
        throw IPAllocationError(gatewayIP + " does not represent a valid network address");
    }
    internetAddress = ntohl(internetAddress);

    //Check if generated IP address is in range of available IP addresses
    if ((internetAddress | maskBits) < (internetAddress + containerID + 1)) {
        throw IPAllocationError("There is no suitable IP address for this container.");
    }

    //IP address is generated by adding 1 to container ID for provide uniqueness
    internetAddress += (containerID + 1);
    internetAddress = htonl(internetAddress);
    return internetAddress;
}


} // namespace softwarecontainer
